From 73806a982083e37acbc8572d935e2ade7e356e00 Mon Sep 17 00:00:00 2001
From: Thomas Buck <xythobuz@xythobuz.de>
Date: Sun, 24 Apr 2016 23:52:09 +0200
Subject: [PATCH] Added hacky spnav lib support

---
 openscad.pro     |   9 +++
 src/MainWindow.h |  18 +++++
 src/QGLView.cc   | 143 +++++++++++++++++++++++-----------
 src/QGLView.h    |   4 +
 src/mainwin.cc   | 231 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 362 insertions(+), 43 deletions(-)

diff --git a/openscad.pro b/openscad.pro
index 23f840e..480873c 100644
--- a/openscad.pro
+++ b/openscad.pro
@@ -580,3 +580,12 @@ INSTALLS += icons
 man.path = $$PREFIX/share/man/man1
 man.extra = cp -f doc/openscad.1 \"\$(INSTALL_ROOT)$${man.path}/$${FULLNAME}.1\"
 INSTALLS += man
+
+# This is ugly, but what would be a better way to do this?
+exists("/usr/local/include/spnav.h") {
+  message("spacenav found")
+  INCLUDEPATH += /usr/local/include
+  DEFINES += SPACENAV
+  LIBS += -lspnav
+  QMAKE_LFLAGS += -L/usr/local/lib
+}
diff --git a/src/MainWindow.h b/src/MainWindow.h
index 3294815..82c02c6 100644
--- a/src/MainWindow.h
+++ b/src/MainWindow.h
@@ -269,6 +269,24 @@ private:
 signals:
 	void highlightError(int);
 	void unhighlightLastError();
+
+#ifdef SPACENAV
+public:
+    static int spnav_clients;
+private:
+    QTimer *spnav_timer;
+    bool spnav_dominant;
+    int spnav_sensitivity;
+
+private slots:
+    void spnav_init();
+    void spnav_deinit();
+    void spnav_poll();
+
+protected:
+    void focusInEvent(QFocusEvent *);
+    void focusOutEvent(QFocusEvent *);
+#endif
 };
 
 class GuiLocker
diff --git a/src/QGLView.cc b/src/QGLView.cc
index 0f00da0..722b1c7 100644
--- a/src/QGLView.cc
+++ b/src/QGLView.cc
@@ -245,15 +245,10 @@ void QGLView::mouseMoveEvent(QMouseEvent *event)
       ) {
       // Left button rotates in xz, Shift-left rotates in xy
       // On Mac, Ctrl-Left is handled as right button on other platforms
-      cam.object_rot.x() += dy;
       if ((QApplication::keyboardModifiers() & Qt::ShiftModifier) != 0)
-        cam.object_rot.y() += dx;
+        rotate(dy, dx, 0);
       else
-        cam.object_rot.z() += dx;
-
-      normalizeAngle(cam.object_rot.x());
-      normalizeAngle(cam.object_rot.y());
-      normalizeAngle(cam.object_rot.z());
+        rotate(dy, 0, dx);
     } else {
       // Right button pans in the xz plane
       // Middle button pans in the xy plane
@@ -262,44 +257,22 @@ void QGLView::mouseMoveEvent(QMouseEvent *event)
 	      cam.zoom(-12.0 * dy);
       } else {
 
-      double mx = +(dx) * 3.0 * cam.zoomValue() / QWidget::width();
-      double mz = -(dy) * 3.0 * cam.zoomValue() / QWidget::height();
+        double mx = +(dx) * 3.0 * cam.zoomValue() / QWidget::width();
+        double mz = -(dy) * 3.0 * cam.zoomValue() / QWidget::height();
 
-      double my = 0;
+        double my = 0;
 #if (QT_VERSION < QT_VERSION_CHECK(4, 7, 0))
-      if (event->buttons() & Qt::MidButton) {
+        if (event->buttons() & Qt::MidButton) {
 #else
-      if (event->buttons() & Qt::MiddleButton) {
+        if (event->buttons() & Qt::MiddleButton) {
 #endif
-        my = mz;
-        mz = 0;
-        // actually lock the x-position
-        // (turns out to be easier to use than xy panning)
-        mx = 0;
-      }
-
-      Matrix3d aax, aay, aaz, tm3;
-      aax = Eigen::AngleAxisd(-(cam.object_rot.x()/180) * M_PI, Vector3d::UnitX());
-      aay = Eigen::AngleAxisd(-(cam.object_rot.y()/180) * M_PI, Vector3d::UnitY());
-      aaz = Eigen::AngleAxisd(-(cam.object_rot.z()/180) * M_PI, Vector3d::UnitZ());
-      tm3 = Matrix3d::Identity();
-      tm3 = aaz * (aay * (aax * tm3));
-
-      Matrix4d tm;
-      tm = Matrix4d::Identity();
-      for (int i=0;i<3;i++) for (int j=0;j<3;j++) tm(j,i)=tm3(j,i);
-
-      Matrix4d vec;
-      vec <<
-        0,  0,  0,  mx,
-        0,  0,  0,  my,
-        0,  0,  0,  mz,
-        0,  0,  0,  1
-      ;
-      tm = tm * vec;
-      cam.object_trans.x() += tm(0,3);
-      cam.object_trans.y() += tm(1,3);
-      cam.object_trans.z() += tm(2,3);
+          my = mz;
+          mz = 0;
+          // actually lock the x-position
+          // (turns out to be easier to use than xy panning)
+          mx = 0;
+        }
+        translate(mx,my,mz);
       }
     }
     updateGL();
@@ -337,15 +310,99 @@ void QGLView::wheelEvent(QWheelEvent *event)
   updateGL();
 }
 
+void QGLView::rotate(double x, double y, double z) {
+    cam.object_rot.x() += x;
+    cam.object_rot.y() += y;
+    cam.object_rot.z() += z;
+
+    normalizeAngle(cam.object_rot.x());
+    normalizeAngle(cam.object_rot.y());
+    normalizeAngle(cam.object_rot.z());
+}
+
+void QGLView::rotate2(double x, double y, double z) {
+    if(x==0 && y==0 && z==0) return;    // nothing to do
+
+    // This vector describes the rotation.
+    // The direction of the vector is the angle around which to rotate, and
+    // the length of the vector is the angle by which to rotate
+    Vector3d rot = Vector3d(-x, y, -z) ;
+
+    // get current rotation matrix
+    Matrix3d aax, aay, aaz, rmx;
+    aax = Eigen::AngleAxisd(-cam.object_rot.x() / 180 * M_PI, Vector3d::UnitX());
+    aay = Eigen::AngleAxisd(-cam.object_rot.y() / 180 * M_PI, Vector3d::UnitY());
+    aaz = Eigen::AngleAxisd(-cam.object_rot.z() / 180 * M_PI, Vector3d::UnitZ());
+    rmx = aaz*(aay*aax);
+
+    // rotate
+    rmx = rmx * Eigen::AngleAxisd(rot.norm()/180.*M_PI, rot.normalized());
+
+    // back to euler
+    // see: http://staff.city.ac.uk/~sbbh653/publications/euler.pdf
+    double theta, psi, phi;
+    if(fabs(rmx(2,0))!=1) {
+        theta = -asin(rmx(2,0));
+        psi = atan2(rmx(2,1)/cos(theta), rmx(2,2)/cos(theta));
+        phi = atan2(rmx(1,0)/cos(theta), rmx(0,0)/cos(theta));
+    } else {
+        phi = 0;
+        if(rmx(2,0)==-1) {
+            theta = M_PI/2;
+            psi = phi+atan2(rmx(0,1), rmx(0,2));
+        } else {
+            theta = -M_PI/2;
+            psi = -phi+atan2(-rmx(0,1), -rmx(0,2));
+        }
+    }
+
+    cam.object_rot.x() = -psi   *180./M_PI;
+    cam.object_rot.y() = -theta *180./M_PI;
+    cam.object_rot.z() = -phi   *180./M_PI;
+
+    normalizeAngle(cam.object_rot.x());
+    normalizeAngle(cam.object_rot.y());
+    normalizeAngle(cam.object_rot.z());
+}
+
+void QGLView::translate(double x, double y, double z) {
+    Matrix3d aax, aay, aaz, tm3;
+    aax = Eigen::AngleAxisd(-(cam.object_rot.x()/180) * M_PI, Vector3d::UnitX());
+    aay = Eigen::AngleAxisd(-(cam.object_rot.y()/180) * M_PI, Vector3d::UnitY());
+    aaz = Eigen::AngleAxisd(-(cam.object_rot.z()/180) * M_PI, Vector3d::UnitZ());
+    tm3 = Matrix3d::Identity();
+    tm3 = aaz * (aay * (aax * tm3));
+
+    Matrix4d tm;
+    tm = Matrix4d::Identity();
+    for (int i=0;i<3;i++) for (int j=0;j<3;j++) tm(j,i)=tm3(j,i);
+
+    Matrix4d vec;
+    vec <<
+      0,  0,  0,  x,
+      0,  0,  0,  y,
+      0,  0,  0,  z,
+      0,  0,  0,  1
+    ;
+    tm = tm * vec;
+    cam.object_trans.x() += tm(0,3);
+    cam.object_trans.y() += tm(1,3);
+    cam.object_trans.z() += tm(2,3);
+}
+
+void QGLView::zoom(int delta) {
+    this->cam.zoom(delta);
+}
+
 void QGLView::ZoomIn(void)
 {
-  this->cam.zoom(120);
+  zoom(120);
   updateGL();
 }
 
 void QGLView::ZoomOut(void)
 {
-  this->cam.zoom(-120);
+  zoom(-120);
   updateGL();
 }
 
diff --git a/src/QGLView.h b/src/QGLView.h
index e675e53..df9f8af 100644
--- a/src/QGLView.h
+++ b/src/QGLView.h
@@ -65,6 +65,10 @@ public slots:
 #ifdef USE_QOPENGLWIDGET
 	inline void updateGL() { update(); }
 #endif
+    void rotate(double x, double y, double z);
+    void rotate2(double x, double y, double z);
+    void translate(double x, double y, double z);
+    void zoom(int delta);
 
 public:
 	QLabel *statusLabel;
diff --git a/src/mainwin.cc b/src/mainwin.cc
index 0351555..ee860d3 100644
--- a/src/mainwin.cc
+++ b/src/mainwin.cc
@@ -123,6 +123,10 @@
 #include "boosty.h"
 #include "FontCache.h"
 
+#ifdef SPACENAV
+#include <spnav.h>
+#endif
+
 // Global application state
 unsigned int GuiLocker::gui_locked = 0;
 
@@ -572,6 +576,12 @@ MainWindow::MainWindow(const QString &filename)
 
 	setAcceptDrops(true);
 	clearCurrentOutput();
+
+#ifdef SPACENAV
+    spnav_dominant = false;
+    spnav_sensitivity = 256;
+    spnav_init();
+#endif
 }
 
 void MainWindow::initActionIcon(QAction *action, const char *darkResource, const char *lightResource)
@@ -679,6 +689,9 @@ void MainWindow::updateReorderMode(bool reorderMode)
 
 MainWindow::~MainWindow()
 {
+#ifdef SPACENAV
+    spnav_deinit();
+#endif
 	if (root_module) delete root_module;
 	if (root_node) delete root_node;
 #ifdef ENABLE_CGAL
@@ -2704,3 +2717,221 @@ void MainWindow::setContentsChanged()
 	this->contentschanged = true;
 }
 
+#ifdef SPACENAV
+void MainWindow::focusInEvent(QFocusEvent *) {
+    if (spnav_clients) {
+        // drop old events (only if spnav has been initialized successfully)
+        spnav_remove_events(SPNAV_EVENT_ANY);
+    }
+
+    if (spnav_timer) {
+        spnav_timer->start();
+    }
+}
+
+void MainWindow::focusOutEvent(QFocusEvent *) {
+    if (spnav_timer)
+        spnav_timer->stop();
+}
+
+int MainWindow::spnav_clients = 0;
+
+void MainWindow::spnav_init() {
+    // only try to open when no one else has already
+    int r = spnav_clients ? 0 : spnav_open();
+    if (r == 0) {
+        spnav_clients++;
+        spnav_timer = new QTimer(this);
+        connect(spnav_timer, SIGNAL(timeout()), this, SLOT(spnav_poll()));
+        spnav_timer->start(10);
+    } else {
+        spnav_timer = 0;
+    }
+}
+
+void MainWindow::spnav_deinit() {
+    if (spnav_timer) {
+        spnav_timer->stop();
+        delete spnav_timer;
+        spnav_timer = NULL;
+    }
+
+    if (--spnav_clients == 0) {
+        // only close if noone else is still using spnav
+        spnav_close();
+    }
+}
+
+void MainWindow::spnav_poll() {
+    spnav_event sev;
+    if (!isActiveWindow()) {
+        return;
+    }
+
+    bool update = false;
+    while (spnav_poll_event(&sev) != 0) {
+        if (sev.type == SPNAV_EVENT_MOTION) {
+            sev.motion.x *= -1.5;
+            sev.motion.z *= -1.5;
+            sev.motion.rx *= -2;
+            sev.motion.ry *= -2;
+            sev.motion.rz *= -2;
+
+            if (spnav_dominant) {
+                // dominant axis only
+                int m = sev.motion.x;
+                if (abs(m) < abs(sev.motion.y)) {
+                    m = sev.motion.y;
+                }
+
+                if (abs(m) < abs(sev.motion.z)) {
+                    m = sev.motion.z;
+                }
+
+                if (abs(m) < abs(sev.motion.rx)) {
+                    m = sev.motion.rx;
+                }
+
+                if (abs(m) < abs(sev.motion.ry)) {
+                    m = sev.motion.ry;
+                }
+
+                if (abs(m) < abs(sev.motion.rz)) {
+                    m = sev.motion.rz;
+                }
+
+                if (sev.motion.x == m) {
+                    sev.motion.y = 0;
+                    sev.motion.z = 0;
+                    sev.motion.rx = 0;
+                    sev.motion.ry = 0;
+                    sev.motion.rz = 0;
+                }
+
+                if (sev.motion.y == m) {
+                    sev.motion.x = 0;
+                    sev.motion.z = 0;
+                    sev.motion.rx = 0;
+                    sev.motion.ry = 0;
+                    sev.motion.rz = 0;
+                }
+
+                if (sev.motion.z == m) {
+                    sev.motion.x = 0;
+                    sev.motion.y = 0;
+                    sev.motion.rx = 0;
+                    sev.motion.ry = 0;
+                    sev.motion.rz = 0;
+                }
+
+                if (sev.motion.rx == m) {
+                    sev.motion.x = 0;
+                    sev.motion.y = 0;
+                    sev.motion.z = 0;
+                    sev.motion.ry = 0;
+                    sev.motion.rz = 0;
+                }
+
+                if (sev.motion.ry == m) {
+                    sev.motion.x = 0;
+                    sev.motion.y = 0;
+                    sev.motion.z = 0;
+                    sev.motion.rx = 0;
+                    sev.motion.rz = 0;
+                }
+
+                if (sev.motion.rz == m) {
+                    sev.motion.x = 0;
+                    sev.motion.y = 0;
+                    sev.motion.z = 0;
+                    sev.motion.rx = 0;
+                    sev.motion.ry = 0;
+                }
+            }
+
+            // rotation
+            qglview->rotate2(sev.motion.rx / (double)spnav_sensitivity,
+                             sev.motion.rz / (double)spnav_sensitivity,
+                             sev.motion.ry / (double)spnav_sensitivity);
+
+            // translation
+            qglview->translate(sev.motion.x / (double)spnav_sensitivity,
+                               0,
+                               sev.motion.y / (double)spnav_sensitivity);
+
+            // zoom
+            qglview->zoom(10 * sev.motion.z / (double)spnav_sensitivity);
+
+            update = true;
+
+        } else if (sev.type == SPNAV_EVENT_BUTTON) {
+            if (sev.button.press == 1) {
+                switch (sev.button.bnum) {
+                case 0:
+                    // 1: orthogonal
+                    viewOrthogonal();
+                    break;
+
+                case 1:
+                    // 2: perspective
+                    viewPerspective();
+                    break;
+
+                case 2:
+                    // 3: toggle dominant axis mode
+                    spnav_dominant = !spnav_dominant;
+                    break;
+
+                case 3:
+                    // 4: view all
+                    qglview->viewAll();
+                    break;
+
+                case 4:
+                    // 5: render preview
+                    actionRenderPreview();
+                    break;
+
+                case 5:
+                    // 6: render
+                    actionRender();
+                    break;
+
+                case 6:
+                    // 7: decrease sensitivity
+                    if (spnav_sensitivity < 2048) {
+                        spnav_sensitivity *= 2;
+                    }
+                    break;
+
+                case 7:
+                    // 8: increase sensitivity
+                    if (spnav_sensitivity > 32) {
+                        spnav_sensitivity /= 2;
+                    }
+                    break;
+
+                default:
+                    //printf("Unhandled spacenav button event: %d\n", sev.button.bnum);
+                    break;
+                }
+
+                update = true;
+            }
+        }
+    }
+
+    /*
+     * First, process all events from the queue, then
+     * updateGL() only once (if necessary at all).
+     * If the queue unexpectedly fills so fast that
+     * this behaviour could cause noticeable delays,
+     * then rendering more often would only make
+     * matters worse anyway.
+     */
+    if (update) {
+        qglview->updateGL();
+    }
+}
+#endif
+
-- 
2.8.1

